{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Ora_Training\\\\ReactJS\\\\Projects\\\\myburger\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport classes from './ContactData.module.css';\nimport Button from '../../../components/UI/Button/Button';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 3,\n            maxLength: 20\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {},\n          valid: true,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Postal Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 7\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {},\n          valid: true,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Email'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 3,\n            maxLength: 50\n          },\n          valid: false,\n          touched: false\n        },\n        delivery: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayName: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayName: 'Cheapest'\n            }]\n          },\n          value: 'fastest',\n          validation: {},\n          valid: true,\n          touched: false\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const customerData = {};\n\n      for (let formElementId in this.state.orderForm) {\n        customerData[formElementId] = this.state.orderForm[formElementId].value;\n      }\n\n      const orderData = { ...this.props.ingredients,\n        totalPrice: this.props.totalPrice,\n        orderID: Date.now()\n      };\n      customerData.customerID = orderData.orderID;\n      Promise.all([axios.post('/Customers', customerData), axios.post('/Orders', orderData)]).then(response => {\n        //alert('Order Successful!');\n        this.setState({\n          loading: false\n        });\n        this.props.history.push(\"/\");\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.inputChangeHandler = (event, formElementID) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[formElementID]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[formElementID] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputId in updatedOrderForm) formIsValid = updatedOrderForm[inputId].valid && formIsValid;\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n    if (rules.required) isValid = value.trim() !== '' && isValid;\n    if (rules.minLength) isValid = value.length >= rules.minLength && isValid;\n    if (rules.maxLength) isValid = value.length <= rules.maxLength && isValid;\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        changed: event => this.inputChangeHandler(event, formElement.id),\n        valid: formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        btnType: \"Success\",\n        disabled: !this.state.formIsValid,\n        clicked: this.orderHandler,\n        children: \"ORDER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this);\n\n    if (this.state.loading) form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 19\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.ContactData,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Enter your Contact Data: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), form]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["D:/Ora_Training/ReactJS/Projects/myburger/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","classes","Button","axios","Spinner","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","maxLength","valid","touched","street","zipCode","country","email","delivery","options","displayName","formIsValid","loading","orderHandler","event","preventDefault","setState","customerData","formElementId","orderData","props","ingredients","totalPrice","orderID","Date","now","customerID","Promise","all","post","then","response","history","push","catch","error","inputChangeHandler","formElementID","updatedOrderForm","updatedFormElement","target","checkValidity","inputId","rules","isValid","trim","length","render","formElementsArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport classes from './ContactData.module.css';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from  '../../../components/UI/Input/Input';\r\n\r\nclass ContactData extends Component{\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 3,\r\n                    maxLength: 20\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {},\r\n                valid: true,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Postal Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 7\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {},\r\n                valid: true,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 3,\r\n                    maxLength: 50\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            delivery: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayName: 'Fastest'},\r\n                        {value: 'cheapest', displayName: 'Cheapest'}]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true,\r\n                touched: false\r\n            }\r\n        },\r\n        formIsValid: false,\r\n        loading: false\r\n    }\r\n\r\n    checkValidity(value, rules){\r\n        let isValid = true;\r\n        if (rules.required)\r\n            isValid = value.trim() !== '' && isValid;\r\n        if (rules.minLength)\r\n            isValid = value.length >= rules.minLength && isValid;\r\n        if (rules.maxLength)\r\n            isValid = value.length <= rules.maxLength && isValid;\r\n\r\n        return isValid;\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        this.setState({loading: true});\r\n        const customerData = {};\r\n        for (let formElementId in this.state.orderForm){\r\n            customerData[formElementId] = this.state.orderForm[formElementId].value;\r\n        }\r\n        const orderData = {\r\n                ...this.props.ingredients,\r\n            totalPrice: this.props.totalPrice,\r\n            orderID: Date.now()\r\n        };\r\n        customerData.customerID = orderData.orderID;\r\n        Promise.all([\r\n            axios.post('/Customers', customerData),\r\n            axios.post('/Orders', orderData)\r\n                ])\r\n            .then(response => {\r\n                //alert('Order Successful!');\r\n                this.setState({loading: false});\r\n                this.props.history.push(\"/\");\r\n            })\r\n            .catch(error => {\r\n                this.setState({loading: false});\r\n            });\r\n    }\r\n\r\n    inputChangeHandler = (event, formElementID) => {\r\n        const updatedOrderForm = {...this.state.orderForm};\r\n        const updatedFormElement = {...updatedOrderForm[formElementID]};\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched = true;\r\n        updatedOrderForm[formElementID] = updatedFormElement;\r\n        let formIsValid = true;\r\n        for (let inputId in updatedOrderForm)\r\n            formIsValid = updatedOrderForm[inputId].valid && formIsValid;\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm){\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form= (\r\n            <form>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input key={formElement.id}\r\n                           elementType={formElement.config.elementType}\r\n                           elementConfig={formElement.config.elementConfig}\r\n                           value={formElement.config.value}\r\n                           changed={(event) => this.inputChangeHandler(event, formElement.id)}\r\n                           valid={formElement.config.valid}\r\n                           shouldValidate={formElement.config.validation}\r\n                           touched={formElement.config.touched}\r\n                    />\r\n                ))}\r\n                <Button btnType=\"Success\"\r\n                        disabled={!this.state.formIsValid}\r\n                        clicked={this.orderHandler}>ORDER</Button>\r\n            </form>\r\n        );\r\n\r\n        if (this.state.loading)\r\n            form= <Spinner />\r\n\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data: </h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}